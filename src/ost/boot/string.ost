"Object subclass: Character ["
nil subclass: Character [
    Character class [
        codePoint: anInteger [
            self _characterCodePoint: anInteger
        ]

        vowels [
            #($a $e $i $o $u)
        ]

        newline [
            self codePoint: 10
        ]
    ]

    codePoint [
        self _characterCodePoint
    ]

    = anObject [
        self class = anObject class
            and: [ self codePoint = anObject codePoint ]
    ]

    display [
        self asString display
    ]

    asLowercase [
        self _characterAsLowercase
    ]

    asString [
        self _characterAsString
    ]
]

Trait named: TStringy [
    TStringy uses: {
        TSequencedReadableCollection.
        THashable.
    }.

    basicAt: i [
        self _stringAt: i
    ]

    size [
        self _stringSize
    ]

    hashBytesOn: aHasher [
        self isSymbol hashBytesOn: aHasher.

        self do: [:ch |
            ch codePoint hashBytesOn: aHasher
        ]
    ]
]

"Collection subclass: Symbol ["
nil subclass: Symbol [
    Symbol uses: TStringy.

    Symbol class [
        internString: aString [
            aString _stringAsSymbol
        ]
    ]

    asString [
        self _symbolAsString
    ]

    asSymbol [ self ]

    isSymbol [ true ]
]

"Collection subclass: String ["
nil subclass: String [
    String uses: TStringy.

    isString [ true ]

    copyFrom: startIndex to: endIndex [
        self checkBounds: startIndex ifOutOfBounds: [ self error: 'out of bounds' ].
        self checkBounds: endIndex ifOutOfBounds: [ self error: 'out of bounds' ].
        self _stringSliceFrom: startIndex to: endIndex
    ]

    , aString [
        self _stringConcatenate: aString
    ]

    asSymbol [
        Symbol internString: self
    ]

    printString [
        self
    ]

    display [
        self _stringDisplay
    ]

    displayNl [
        self display.
        Character newline display.
    ]
]
