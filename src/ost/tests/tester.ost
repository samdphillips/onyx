
Object subclass: Test [
    | name setupBlock testBlock |

    Test class [
        name: aString setup: setupBlock test: testBlock [
            self new
                name: aString;
                setup: setupBlock;
                test: testBlock;
                yourself
        ]
    ]

    setup: aBlock [
        setupBlock := aBlock
    ]

    test: aBlock [
        testBlock := aBlock
    ]

    name [ name ]

    name: aString [
        name := aString
    ]

    run: reporter [
        [ | obj |
            obj := setupBlock ifNotNil: [ setupBlock value ].
            (testBlock cull: obj)
                ifTrue:  [ reporter reportSuccess: self ]
                ifFalse: [ reporter reportFailure: self ]
        ] on: Exception
          do: [:exc | reporter reportError: exc onTest: self ]
    ]
]

Object subclass: TestErrorResult [
    | test exception |

    TestErrorResult class [
        on: aTest with: anException [
            self new
                test: aTest;
                exception: anException;
                yourself
        ]
    ]

    test: aTest [
        test := aTest
    ]

    exception: anException [
        exception := anException
    ]

    isSuccess [ false ]
    isFailure [ false ]
    isError   [ true ]

    report [
        (exception printString,
            Character newline asString,
            '    raised while running test: ',
            test name) printNl
    ]
]

Object subclass: TestSuccess [
    | test |

    TestSuccess class [
        on: aTest [
            self new
                test: aTest;
                yourself
        ]
    ]

    test: aTest [
        test := aTest
    ]

    isSuccess [ true ]
    isFailure [ false ]
    isError   [ false ]
]

Object subclass: TestFailure [
    | test |

    TestFailure class [
        on: aTest [
            self new
                test: aTest;
                yourself
        ]
    ]

    test: aTest [
        test := aTest
    ]

    isSuccess [ false ]
    isFailure [ true ]
    isError   [ false ]

    report [
        (test name, ' failed') printNl
    ]
]

Object subclass: TestReporter [
    | results |

    TestReporter class [
        new [ super new initialize; yourself ]
    ]

    initialize [
        results := OrderedCollection new
    ]

    reportSuccess: aTest [
        '.' print.
        results add: (TestSuccess on: aTest)
    ]

    reportFailure: aTest [
        'F' print.
        results add: (TestFailure on: aTest)
    ]

    reportError: anException onTest: aTest [
        'E' print.
        results add: (TestErrorResult on: aTest with: anException)
    ]

    failures [
        results select: [:r | r isFailure ]
    ]

    errors [
        results select: [:r | r isError ]
    ]

    allSuccess [
        results allSatisfy: [:r | r isSuccess ]
    ]

    printResults [
        Character newline asString print.

        self failures do: [:result|
            result report
        ].

        self errors do: [:result|
            result report
        ]
    ]
]

TestReporter subclass: VerboseTestReporter [
    reportSuccess: aTest [
        (aTest name, '... ok') printNl.
        results add: (TestSuccess on: aTest)
    ]

    reportFailure: aTest [
        (aTest name, '... fail') printNl.
        results add: (TestFailure on: aTest)
    ]

    reportError: anException onTest: aTest [
        (aTest name, '... error') printNl.
        results add: (TestErrorResult on: aTest with: anException)
    ]
]

Object subclass: Tester [
    | setup tests reporter |

    Tester class [
        new [
            self withReporter: TestReporter new
        ]

        withReporter: aReporter [
            super new initialize;
                reporter: aReporter;
                yourself
        ]
    ]

    initialize [
        tests := OrderedCollection new.
    ]

    reporter: aReporter [
        reporter := aReporter
    ]

    setup: aBlock [
        setup := aBlock
    ]

    do: aBlock [
        tests do: aBlock
    ]

    add: testCollection [
        testCollection do: [:t | tests add: t ]
    ]

    add: aString test: aBlock [
        tests add: (Test name: aString setup: setup test: aBlock)
    ]

    name: aString test: aBlock [
        self add: aString test:aBlock
    ]

    test: aBlock [
        tests add: (Test name: 'anonymous' setup: setup test: aBlock)
    ]

    numTests [
        tests size
    ]

    testName: aNumber [
        (tests at: aNumber) name
    ]

    runTest: aNumber [
        | reporter |
        reporter := TestReporter new.
        (tests at: aNumber) run: reporter.
        reporter allSuccess
    ]

    run [
        tests do: [:t | t run: reporter ]
    ]

    report [
        reporter printResults
    ]
]
