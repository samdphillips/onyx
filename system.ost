
nil subclass: Object [

    == anObject [
        self _objectEqual: anObject
    ]

    = anObject   [ self == anObject ]
    ~= anObject  [ (self = anObject) not ]
    ~~ anObject [ (self == anObject) not ]

    class [
        self _objectClass
    ]

    stackTrace [
        self _objectStackTrace
    ]

    debug [
        self _objectDebug
    ]

    error: aString [
        Error signal: aString
    ]

    doesNotUnderstand: aMessage [
        MessageNotUnderstood new
            receiver: self;
            message: aMessage;
            signal
    ]

    halt [
        self _objectHalt
    ]

    isKindOf: aClass [
        | cls |
        cls := self class.
        [
            cls isNil ifTrue: [ ^ false ].
            cls == aClass ifTrue: [ ^ true ].
            cls := cls superclass
        ] repeat
    ]

    isMemberOf: aClass [
       self class == aClass
    ]

    yourself [
        self
    ]

    -> anObject [
        Association key: self value: anObject
    ]

    ifNil: aBlock [
        nil
    ]

    ifNotNil: aBlock [
        aBlock value
    ]

    ifNil: nilBlock ifNotNil: notNilBlock [
        notNilBlock value
    ]

    ifNotNil: notNilBlock ifNil: nilBlock [
        self ifNil: nilBlock ifNotNil: notNilBlock
    ]

    isNil          [ false ]
    isNotNil       [ true  ]
    isClass        [ false ]
    isBoolean      [ false ]
    isNumber       [ false ]
    isSmallInt     [ false ]
    isArray        [ false ]
    isString       [ false ]
    isSymbol       [ false ]
    isContinuation [ false ]
]

Object subclass: Class [
    new [
        self _classNew
    ]

    superclass [
        self _classSuperclass
    ]

    name [
        self _className
    ]
]

Object subclass: UndefinedObject [
    isNil    [ true  ]
    isNotNil [ false ]

    ifNil: aBlock [
        aBlock value
    ]

    ifNotNil: aBlock [
        nil
    ]

    ifNil: nilBlock ifNotNil: notNilBlock [
        nilBlock value
    ]

]

Object subclass: Boolean [
    isBoolean [ true ]

    ifFalse: falseBlock ifTrue: trueBlock [
        self ifTrue: trueBlock ifFalse: falseBlock
    ]

]

Boolean subclass: True [
    ifTrue: aBlock [
        aBlock value
    ]

    ifFalse: aBlock [
        nil
    ]

    ifTrue: trueBlock ifFalse: falseBlock [
        trueBlock value
    ]

    not [ false ]

    and: aBlock [
        aBlock value
    ]

    or: aBlock [
        true
    ]
]

Boolean subclass: False [
    ifTrue: aBlock [
        nil
    ]

    ifFalse: aBlock [
        aBlock value
    ]

    ifTrue: trueBlock ifFalse: falseBlock [
        falseBlock value
    ]

    not [ true ]

    and: aBlock [
        false
    ]

    or: aBlock [
        aBlock value
    ]
]

Object subclass: Message [
    | selector arguments |

    selector  [ selector  ]
    arguments [ arguments ]
]

Object subclass: BlockClosure [
    value [ self _blockValue ]

    value: a [
        self _blockValue: a
    ]

    value: a value: b [
        self _blockValue: a value: b
    ]

    value: a value: b value: c [
        self _blockValue: a value: b value: c
    ]

    value: a value: b value: c value: d [
        self _blockValue: a value: b value: c value: d
    ]

    withCont [
        self control: Continuation defaultTag
    ]

    withCont: promptTag [
        self _blockWithCont: promptTag
    ]

    withPrompt [
        self withPrompt: PromptTag new
    ]

    withPrompt: promptTag [
        self withPrompt: promptTag abort: [:x | x ]
    ]

    withPrompt: promptTag abort: aBlock [
        self _blockWithPrompt: promptTag abort: aBlock
    ]

    withMark: tag value: anObject [
        self _blockWithMark: tag value: anObject
    ]

    repeat [
        self value.
        self repeat
    ]

    whileTrue: aBlock [
        [ self value
            ifFalse: [ ^ nil ]
            ifTrue:  [ aBlock value ] ] repeat
    ]

    whileFalse: aBlock [
        [ self value not ] whileTrue: aBlock
    ]

    on: anExceptionSelector do: aBlock [
        | handler |
        handler := ExceptionHandler new
                       selector: anExceptionSelector
                       handlerBlock: aBlock.

        handler installAndDo: self
    ]

    ifCurtailed: aBlock [
        [ self withPrompt ] withMark: CurtailedMark value: aBlock
    ]

]

Object subclass: PromptTag [
    abort [
        self abort: nil
    ]

    abort: aValue [
        "FIXME: change this primitive"
        aValue _objectAbort: self
    ]
]

DefaultPromptTag := PromptTag new.

Object subclass: Continuation [
    | frames |

    Continuation class [
        defaultTag [
            "this should really be ... (once class ivars work)"
            "defaultTag ifNil: [ defaultTag := Object new ].
             defaultTag"
            DefaultPromptTag
        ]
    ]

    isContinuation [ true ]

    value [
        self value: nil
    ]

    value: anObject [
        self do: [ anObject ]
    ]

    do: aBlock [
        self _continuationDo: aBlock
    ]

]

Object subclass: ContinuationMark [
    firstMark: promptTag [
        self _continuationFirstMark: promptTag
    ]

    marks: promptTag [
        self _continuationMarks: promptTag
    ]
]

ExceptionHandlerMark := ContinuationMark new.
CurtailedMark := ContinuationMark new.

Object subclass: ExceptionHandler [
    | handlerBlock selector tag |

    ExceptionHandler class [
        mark [
            ExceptionHandlerMark
        ]

        currentHandlers [
            self mark marks: Continuation defaultTag
        ]

        findHandlerFor: anException [
            self currentHandlers detect: [:h | h handles: anException ]
        ]
    ]

    selector: anExceptionSelector handlerBlock: aBlock [
        handlerBlock := aBlock.
        selector     := anExceptionSelector.
        tag          := PromptTag new.
        self
    ]

    handles: anException [
        selector handles: anException
    ]

    installAndDo: aBlock [
        [ aBlock
              withMark: ExceptionHandler mark
              value: self ]
            withPrompt: tag
            abort: [:exc || val |
                       val := handlerBlock value: exc.
                       exc exit.
                       val ]
    ]

    signalWith: anException [
        [:k |
            anException resumer: k;
                exitBlocks: (CurtailedMark marks: tag).
            self throw: anException
        ] withCont: tag
    ]

    throw: anException [
        tag abort: anException
    ]

]

Object subclass: Exception [
    | handler resumer exitBlocks messageText |

    Exception class [
        handles: anException [
            anException isKindOf: self
        ]

        signal [
            self new signal
        ]

        signal: aString [
            self new
                messageText: aString;
                signal
        ]
    ]

    messageText: aString [
        messageText := aString
    ]

    messageText [
        messageText
    ]

    resumer: aContinuation [
        resumer := aContinuation
    ]

    exitBlocks: aCollection [
        exitBlocks := aCollection
    ]

    defaultAction [
        self _systemIsBroken: messageText
    ]

    signal [
        handler := ExceptionHandler findHandlerFor: self.
        handler ifNil: [ self defaultAction ].
        handler signalWith: self.
    ]

    isNested [
        (ExceptionHandler findHandlerFor: self) isNotNil
    ]

    pass [
        handler := ExceptionHandler findHandlerFor: self.
        handler throw: self
    ]

    isResumable [
        true
    ]

    resume:  aValue [
        self isResumable
            ifFalse: [ self error: 'exception is not resumable' ].
        handler installAndDo: [ resumer value: aValue ]
    ]

    resume [
        self resume: nil
    ]

    exit [
        exitBlocks do: [:b | b value ]
    ]

    "need to write:
      - outer
      - resignalAs: anException
      - retry
      - retryUsing: aBlock
      - return: anObject
     "
]

Exception subclass: Error [ ]

Exception subclass: MessageNotUnderstood [
    | receiver message |

    receiver: anObject [
        receiver := anObject
    ]

    message: aMessage [
        message := aMessage
    ]
]

Exception subclass: ImmutableCollectionError [ ]

Object subclass: Number [
    between: min and: max [
        self >= min and: [ self <= max ]
    ]

    sign [
        self isNegative
            ifTrue:  [ -1 ]
            ifFalse: [  1 ]
    ]

    isNegative [
        self < 0
    ]

    isNumber [ true ]
]

Number subclass: SmallInt [
    isSmallInt [ true ]

    addToSmallInt: aNumber [
        aNumber _addSmallInt: self
    ]

    subToSmallInt: aNumber [
        aNumber _smallIntSub: self
    ]

    quoToSmallInt: aNumber [
        aNumber _smallIntQuo: self
    ]

    mulToSmallInt: aNumber [
        aNumber _mulSmallInt: self
    ]

    ltToSmallInt: aNumber [
        aNumber _smallIntLt: self
    ]

    + aNumber [
        aNumber addToSmallInt: self
    ]

    - aNumber [
        aNumber subToSmallInt: self
    ]

    // aNumber [
        aNumber quoToSmallInt: self
    ]

    * aNumber [
        aNumber mulToSmallInt: self
    ]

    < aNumber [
        aNumber ltToSmallInt: self
    ]

    > aNumber [
        aNumber < self
    ]

    <= aNumber [
        (self > aNumber) not
    ]

    >= aNumber [
        aNumber <= self
    ]

    to: end [
        Interval from: self to: end
    ]

    to: end do: aBlock [
        (self to: end) do: aBlock
    ]

    isOdd [
        self _smallIntIsOdd
    ]

    isEven [
        self isOdd not
    ]
]

Object subclass: Association [
    | key value |

    Association class [
        key: key value: value [
            self new
                initializeKey: key value: value;
                yourself
        ]
    ]

    initializeKey: aKey value: aValue [
        key := aKey.
        value := aValue
    ]

    key   [ key ]

    value [ value ]

    value: anObject [
        value := anObject
    ]
]

Object subclass: Collection [
    asArray [
        Array withAll: self
    ]

    isEmpty [
        self size = 0
    ]

    notEmpty [
        self isEmpty not
    ]

    allSatisfy: aBlock [
        self do: [:e |
            (aBlock value: e)
                ifFalse: [ ^ false ]
        ].
        true
    ]

    anySatisfy: aBlock [
        self do: [:e |
            (aBlock value: e)
                ifTrue: [ ^ true ]
        ].
        false
    ]

    includes: anObject [
        self anySatisfy: [:e | e = anObject ]
    ]

    inject: acc into: aBlock [
        | a |
        a := acc.
        self do: [:e |
            a := aBlock value: a value: e
        ].
        a
    ]

    detect: aBlock ifNone: excBlock [
        self do: [:e |
            (aBlock value: e) ifTrue: [ ^ e ]
        ].
        excBlock value
    ]

    detect: aBlock [
        self detect: aBlock ifNone: [ nil ]
    ]

    immutableError [
        ImmutableCollectionError signal
    ]
]

Collection subclass: SequencedCollection [
    checkBounds: i [
        (i between: 0 and: self size - 1)
            ifFalse: [ self error: 'out of bounds' ]
    ]

    do: aBlock [
        | i size |
        i    := 0.
        size := self size.

        [ i < size ] whileTrue: [
            aBlock value: (self at: i).
            i := i + 1
        ]
    ]
]

Object subclass: Character [
    Character class [
        codePoint: anInteger [
            self _characterClassCodePoint: anInteger
        ]
    ]

    codePoint [
        self _characterCodePoint
    ]
]

SequencedCollection subclass: Symbol [
    Symbol class [
        internString: aString [
            aString _stringAsSymbol
        ]
    ]

    asString [
        self _symbolAsString
    ]

    asSymbol [ self ]

    isSymbol [ true ]
]

SequencedCollection subclass: String [
    isString [ true ]

    at: i [
        self checkBounds: i.
        self basicAt: i
    ]

    basicAt: i [
        self _stringAt: i
    ]

    size [
        self _stringSize
    ]

    , aString [
        self _stringConcat: aString
    ]

    asSymbol [
        Symbol internString: self
    ]
]

SequencedCollection subclass: Array [
    Array class [
        new: size [
            self _arrayNew: size
        ]

        new [
            self new: 0
        ]

        with: anObject [
            (self new: 1)
                at: 0 put: anObject;
                yourself
        ]

        withAll: aCollection [
            | arr i |
            arr := self new: aCollection size.
            i   := 0.

            aCollection do: [:e |
                arr at: i put: e.
                i := i + 1
            ].
            arr
        ]
    ]

    isArray [ true ]

    size [
        self _arraySize
    ]

    basicAt: i put: anObject [
        self _arrayAt: i put: anObject.
        anObject
    ]

    basicAt: i [
        self _arrayAt: i
    ]

    at: i put: anObject [
        self checkBounds: i.
        self basicAt: i put: anObject
    ]

    at: i [
        self checkBounds: i.
        self basicAt: i
    ]

    asArray [ self ]

    , aCollection [
        self _arrayAppend: aCollection asArray
    ]
]

SequencedCollection subclass: Interval [
    | start end step |

    Interval class [
        from: start to: stop [
            self from: start to: stop by: (stop - start) sign
        ]

        from: start to: stop by: step [
            self new
                initializeFrom: start to: stop by: step;
                yourself
        ]
    ]

    initializeFrom: startval to: stopval by: stepval [
        start := startval.
        stop  := stopval.
        step  := stepval.
    ]

    start [ start ]
    stop  [ stop  ]
    step  [ step  ]

    size [
        "only works for positive ranges so far..."
        (((stop - start) // step) * step) + start
    ]

    at: i [
        self checkBounds: i.
        (step * i) + start
    ]

]

SequencedCollection subclass: OrderedCollection [
    | elements firstIndex lastIndex |

    OrderedCollection class [
        new [
            self new: self defaultSize
        ]

        new: size [
            super new initialize: size * 2; yourself
        ]

        defaultSize [ 8 ]
    ]

    initialize: size [
        elements := Array new: size.
        firstIndex := lastIndex := size // 2
    ]

    size [ lastIndex - firstIndex ]

    checkResize: index [
        (index between: 0 and: elements size - 1)
            ifFalse: [ self resize: index ]
    ]

    resize: index [
        | grow |
        grow := self size // 2.

        index < 0
            ifTrue:  [ self resizeStart: grow ]
            ifFalse: [ self resizeEnd:   grow ]
    ]

    resizeStart: grow [
        elements   := (Array new: grow), elements.
        firstIndex := firstIndex + grow.
        lastIndex  := lastIndex  + grow.
    ]

    resizeEnd: grow [
        elements := elements, (Array new: grow)
    ]

    add: anObject [
        self addLast: anObject
    ]

    addLast: anObject [
        self checkResize: lastIndex + 1.
        elements at: lastIndex put: anObject.
        lastIndex := lastIndex + 1
    ]

    addFirst: anObject [
        self checkResize: firstIndex - 1.
        elements at: firstIndex - 1 put: anObject.
        firstIndex := firstIndex - 1
    ]

    at: i [
        self checkBounds: i.
        elements at: firstIndex + i
    ]

]
